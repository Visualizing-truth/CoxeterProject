

# This file was *autogenerated* from the file divide_conquer.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1)
import random
import networkx as nx

def is_level_0(CM):
    """
    input: CM : Coxeter matrix
    output: bool

    Takes as input a Coxeter matrix representing a coxeter graph and returns True if the graph is level 0, False otherwise.

    Check if the bilinear form has no negative eigenvalues 
    """
    return CM.is_finite() or CM.is_affine() #or is_repr_affine(CM)



def articulation_points(CM):

    CG = CM.coxeter_graph()

    nxG = CG.networkx_graph()
    return list(nx.articulation_points(nxG))

def delete_node(CM, articulation_points):

    if not articulation_points:
        print("No articulation points found.")
        return [CM]

    node = random.choice(articulation_points)


    M = Matrix(CM)
    CG = CM.coxeter_graph().copy(immutable=False)
    CG.delete_vertex(node)


    connected_components = CG.connected_components()
    result = []

    for component in connected_components:
        component = sorted(component)
        submat = M.submatrix(component,component)
        result.append(CoxeterMatrix(submat))
    
    return result


def divide(CM):
    return delete_node(CM, articulation_points(CM))


def get_level(CM):

    if is_level_0(CM):
        return _sage_const_0 
    
    subgraphs = divide(CM)

    level = [get_level(subgraph) for subgraph in subgraphs]

    return _sage_const_1  + max(level)
    
    

CM = M3

print(is_level_0(M3))
    

    

