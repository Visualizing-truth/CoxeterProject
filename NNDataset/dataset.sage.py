

# This file was *autogenerated* from the file dataset.sage
from sage.all_cmdline import *   # import sage library

_sage_const_6 = Integer(6); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_10 = Integer(10); _sage_const_15 = Integer(15); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_9 = Integer(9); _sage_const_0 = Integer(0); _sage_const_50 = Integer(50)
import random
import numpy as np
import csv

load("CoxeterProperties.sage")
load("misc.sage")

def generateType(kind, startIndex, finite):
    '''
        kind: string
        startIndex: int
        finite: boolean
        
        HardCoded: 6
    '''
    ls = []
    if finite: 
        for i in range(startIndex, _sage_const_6 ):
            CM = CoxeterType([kind, i]).coxeter_matrix()
            ls.append(CM)

    else: 
        for i in range(startIndex, _sage_const_6 ):
            CM = CoxeterType([kind, i, _sage_const_1 ]).coxeter_matrix()
            ls.append(CM)

    return ls

def generateCM(n):
    lsOfCM = []
    for i in range(_sage_const_1 , n+_sage_const_1 ):
        CM = CoxeterType(['A', i]).coxeter_matrix()
        lsOfCM.append(CM)

    for j in range(_sage_const_2 , n+_sage_const_1 ):
        CM = CoxeterType(['B', j]).coxeter_matrix()
        lsOfCM.append(CM)

    return lsOfCM

def I2():
    ls = []
    
    for i in range(_sage_const_3 , _sage_const_10 ):
        CM = CoxeterType(['I', i]).coxeter_matrix()
        ls.append(CM)
    return ls


ls = [CoxeterType.samples(finite=True)[i].coxeter_matrix() for i in range(_sage_const_6 , _sage_const_15 )]

finite = ls+generateCM(_sage_const_5 )+I2()



count = _sage_const_1 


ls2 = generateType('A', _sage_const_1 , False) + generateType('B', _sage_const_3 , False) + generateType('C', _sage_const_2 , False) + generateType('D', _sage_const_4 , False)

affine = [CoxeterType.samples(finite=False)[i].coxeter_matrix() for i in range(_sage_const_4 , _sage_const_9 )] + ls2



def arrayForCSV(ls):
    arrayLs = []
    for c in ls:
        c = CoxeterMatrix(c)
        arrayC = []
        arrayC.append(f"{check_level(c)}")
        m = c._matrix_()
        for i in range(len(m.rows())):
            for j in range(len(m.rows())):
                arrayC.append(m[i,j])
        for i in range(len(arrayC), _sage_const_9 **_sage_const_2 +_sage_const_1 ):
            arrayC.append(_sage_const_0 )
        arrayLs.append(arrayC)
    return arrayLs


final_data = arrayForCSV(finite)+arrayForCSV(affine)+arrayForCSV(remove_isomorphic_graphs(getAllGraphs(_sage_const_50 )))


print(len(finite))
print(len(affine))
print(len(final_data))

header = ["label"] + [f"value{i+_sage_const_1 }" for i in range(_sage_const_9 **_sage_const_2 )] 



with open('training.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(header)
    writer.writerows(final_data)






