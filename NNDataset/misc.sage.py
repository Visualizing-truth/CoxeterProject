

# This file was *autogenerated* from the file misc.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_6 = Integer(6); _sage_const_7 = Integer(7); _sage_const_0p3 = RealNumber('0.3'); _sage_const_0p35 = RealNumber('0.35'); _sage_const_0p25 = RealNumber('0.25'); _sage_const_0p05 = RealNumber('0.05'); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1)
import random

cases = []
labels = [_sage_const_3 , _sage_const_4 , _sage_const_5 , _sage_const_6 , _sage_const_7 ]
# Weights for each label: higher weights for 3,4,5
weights = [_sage_const_0p3 , _sage_const_0p35 , _sage_const_0p25 , _sage_const_0p05 , _sage_const_0p05 ]  # Probabilities sum to 1

def getAllGraphs(n):
    count = _sage_const_0 
    for nodes in range(_sage_const_2 , _sage_const_6 ):
        for g in graphs.nauty_geng(f"{nodes} -c"):
            m = CoxeterMatrix(g)._matrix_()
            yield g
            count+=_sage_const_1 
            edges = {}
            for i in range(len(m.rows())):
                for j in range(i+_sage_const_1 , len(m.rows())):
                    if m[i][j] >= _sage_const_3 :
                        edges[(i, j)] = m[i][j]
            for i in range(n):
                new_matrix = copy(m)
                for (v1, v2) in edges.keys():
                    # Choose a random number with weighted probabilities
                    newEdgeLabel = random.choices(labels, weights=weights, k=_sage_const_1 )[_sage_const_0 ]
                    # Update both (v1,v2) and (v2,v1) since the matrix is symmetric
                    new_matrix[v1,v2] = newEdgeLabel
                    new_matrix[v2,v1] = newEdgeLabel 
                new_graph = CoxeterMatrix(new_matrix).coxeter_graph()
                yield new_graph
                count+=_sage_const_1 
    print(count)

def remove_isomorphic_graphs(all_cases):
    unique_graphs = []
    for g in all_cases:
        if len(unique_graphs) == _sage_const_0 :
            unique_graphs.append(g)
        else:
            if not any(g.is_isomorphic(prevGraph, edge_labels=True) for prevGraph in unique_graphs):
                unique_graphs.append(g)
    print(type(unique_graphs[_sage_const_0 ]))
    return unique_graphs
            



    


