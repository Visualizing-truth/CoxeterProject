

# This file was *autogenerated* from the file coxeter_graphs.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4)
def is_finite_lvl0(G):
    """
    Check if the graph G is a level 0 Coxeter graph.
    """
    # Check if the graph is connected
    if not G.is_connected():
        return False
    
    for name, graph in globals().items():
        if isinstance(graph, Graph):
            if G.is_isomorphic(graph):
                print(f"The graph is isomorphic to {name}")
                return True
    return False


def create_cartan_matrix(G):
    """
    Create a Cartan Matrix (n x n) from a graph G.
    """
    # Get the number of vertices
    n = G.num_verts()

    #Get the adjacency matrix
    adjacency_matrix = G.adjacency_matrix()
    
    # Initialize the Cartan matrix
    cartan_matrix = Matrix(ZZ, n, n)
    
    # Fill the Cartan matrix based on the edges of the graph
    for i in range(n):
        for j in range(n):
            if i == j:
                cartan_matrix[i, j] = _sage_const_2 
            elif adjacency_matrix[i, j] != _sage_const_0 :
                cartan_matrix[i, j] = -adjacency_matrix[i, j]
            else:
                cartan_matrix[i, j] = _sage_const_0 
    
    return cartan_matrix

def node_with_max_weighted_degree(G):
    weighted_degrees = G.degree(weighted=True)
    max_node = max(weighted_degrees, key=lambda x: x[_sage_const_1 ])[_sage_const_0 ]
    return max_node

def check_level(G, current_level):
    
    A = create_cartan_matrix(G)

    if A.determinant() == _sage_const_0 :
        print("The graph is a level 0 Coxeter graph and is affine")
        return current_level
    elif A.determinant() > _sage_const_0 :
        print("The graph is a level 0 Coxeter graph and is finite")
        return current_level
    elif A.determinant() < _sage_const_0 :
        print("The graph is not a level 0 Coxeter graph")
        current_level += _sage_const_1 

    G1 = G.copy()
    G1.delete_vertex(node_with_max_weighted_degree(G))

    subgraphs = G1.connected_components_subgraphs()
    for subgraph in subgraphs:
        check_level(subgraph, current_level)

    return current_level

def main():

    current_level = _sage_const_0 
    # Example usage
    G = Graph(Matrix([
        [_sage_const_0 , _sage_const_4 , _sage_const_0 , _sage_const_0 ],
        [_sage_const_4 , _sage_const_0 , _sage_const_1 , _sage_const_0 ],
        [_sage_const_0 , _sage_const_1 , _sage_const_0 , _sage_const_4 ],
        [_sage_const_0 , _sage_const_0 , _sage_const_4 , _sage_const_0 ]
    ]))

    current_level = check_level(G, current_level)

    print("Current level:", current_level)


main()

    




