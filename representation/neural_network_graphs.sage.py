

# This file was *autogenerated* from the file representation/neural_network_graphs.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_6 = Integer(6); _sage_const_7 = Integer(7); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1)
import csv
from itertools import product


load("coxeter_graphs.sage")
load("cm_utils.sage")


label_values = [_sage_const_3 ,_sage_const_4 , _sage_const_5 , _sage_const_6 , _sage_const_7 ]
nodes = _sage_const_4 
csv_filename = "coxeter_matrices.csv"


with open(csv_filename, mode='a', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(["ID", "NumNodes", "Level", "Matrix"])

    count = _sage_const_0 
    graph = _sage_const_0 

    for i in range(_sage_const_2 , nodes + _sage_const_1 ):
        for g in graphs.nauty_geng(f"{i} -c"):
            graph += _sage_const_1 
            CM = CoxeterMatrix(g)
            origin_matrix = get_matrix(CM)
            positions = [(j, k) for j in range(i) for k in range(j+_sage_const_1 , i) if origin_matrix[j][k] == _sage_const_3 ]

            for label_comb in product(label_values, repeat=len(positions)):
                new_matrix = [row[:] for row in origin_matrix]

                for(j, k), value in zip(positions, label_comb):
                    new_matrix[j][k] = new_matrix[k][j] =value

                try: 
                    new_CM = CoxeterMatrix(new_matrix)
                    level = get_level(new_CM)
                    count += _sage_const_1 

                    writer.writerow([count, i, level] + new_matrix)

                except Exception:
                    continue

    print(f"{count} matrices with {nodes} nodes generated and saved to {csv_filename}.")

